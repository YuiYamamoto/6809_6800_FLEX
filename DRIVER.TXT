** FLEX9 DISK DRIVER on Windows for 6809SBD**    '2018.03.06*    Copyright by Y.Yamamoto**ACK EQU $06NAK EQU $15ESC EQU $1B*ACIA(6850) for Windows driveSCMD EQU $F0CC cmdSSTS EQU SCMD statusSDATA EQU SCMD+1 dataMRSTA EQU $43 master resetCLRTSA EQU $55 RTS=H,1stopbit,non pari,8bit,16xSERTSA EQU $15 RTS=L,1stopbit,non pari,8bit,16x ORG $DE00DSKTBL EQU * JMP READ JMP WRITE JMP VERFY JMP RESTR JMP DRIVE JMP CHKRDY JMP CHKRDY JMP INIT JMP WARM JMP SEEK*DRV FCB 0CSUM FCB 0XSAV FDB 00*--------------------*VERFY EQU **NO ENTRY* (B)= error condition* (Z)=1 no error*    =0 an error CLRB *no errors(B=0,Z=1) RTS*RESTR EQU **X:FCB ADR* (B)= error condition* (Z)= 1 no error*    = 0 an error BSR DRIVE RTSDRIVE EQU **X:FCB ADR* (B)= $0F non-existent drive*    = error condition otherwise* (Z)= 1 no error*    = 0 an error* (C)= 0 no error*    = 1 an error LDA 3,X CMPA #3 BLS DRV2 LDB #$0F ORCC #$01 RTSDRV2 STA DRV CLRB *no errors(Z=1) ANDCC #$FE *no errors(C=0) RTS*CHKRDY EQU **X:FCB ADR* (B)= error condition* (Z)= 1 no error*    = 0 an error* (C)= 0 no error*    = 1 an error LDA 3,X *get drv no CMPA #3 BLS OK LDB #$80 ORCC #$01 RTSOK CLRB ANDCC #$FE RTS**QUICK EQU *WARM EQU * RTS*INIT EQU * CLR DRV drive no=0* initialize ACIA(6850) LDA #MRSTA STA SCMD NOP LDA #CLRTSA ;RTS=H,1stopbit,non pari,8bit,16x STA SCMD*wait acia buffer emptyINI2 LDA SDATA dummy read LDA SSTS check buffer full ASRA BCS INI2 RTS*SEEK EQU **A:TRK, B:SCT* (B)= error condition* (Z)= 1 no error*    = 0 an error CLRB ANDCC #$FE RTS *READ EQU ** A:TRK, B:SCT, X:ADR* (B)= error condition* (Z)= 1 no error*    = 0 an errorRD0  CLR CSUM PSHS A LDA #'R LBSR SNDCH read cmd BSR ADDCS LDA DRV LBSR SNDCH drv BSR ADDCS PULS A LBSR SNDCH trk BSR ADDCS TFR B,A LBSR SNDCH sct BSR ADDCS LDA CSUM LBSR SNDCH csum*wait receive ACKorNAKorESC*  if NAK then re-send 'R',Drv,Trk,Sct,csum*  if ESC then error return*  if ACK then nextRD1 LBSR RCVCH CMPA #NAK BEQ RD0 CMPA #ESC BNE RD2 LDB #16 *drive not ready error TSTB *Z=0 RTS*RD2 CMPA #ACK BNE RD1* send ACK LBSR SNDCH ACK*receive data(256bytes),csum*  data is saved to Buffer(X)**  if csum error then send NAK*  if csum ok then send ACK and to next process STX XSAVRD3 LDX XSAV CLRB counter(256) CLR CSUMRDLOP LBSR RCVCH data STA ,X+ BSR ADDCS DECB BNE RDLOP LBSR RCVCH csum CMPA CSUM BEQ RD4 LDA #NAK LBSR SNDCH NAK BRA RD3RD4 LDA #ACK LBSR SNDCH ACK*wait receive ACKRD5 LBSR RCVCH CMPA #ACK BNE RD5*no error(B=0,Z=1) CLRB RTS*--------------------*add check sumADDCS EQU * ADDA CSUM STA CSUM RTS*--------------------*WRITE EQU ** A:TRK, B:SCT, X:ADR* (B)= error condition* (Z)= 1 no error*    = 0 an errorWR0 CLR CSUM PSHS A LDA #'W BSR SNDCH write cmd BSR ADDCS LDA DRV BSR SNDCH drv BSR ADDCS PULS A BSR SNDCH trk BSR ADDCS TFR B,A BSR SNDCH sct BSR ADDCS LDA CSUM BSR SNDCH csum*wait receive ACKorNAK*  if NAK then re-send 'W',Drv,Trk,Sct,csum*  if ESC then error return*  if ACK then nextWR1 BSR RCVCH CMPA #NAK BEQ WR0 CMPA #ESC BNE WR2 LDB #16 *drive not ready error TSTB *Z=0 RTS*WR2 CMPA #ACK BNE WR1*send data(256bytes),csum*data is in Buffer(X) from FLEX File STX XSAVWR3 LDX XSAV CLRB counter(256) CLR CSUMWRLOP LDA ,X+ BSR SNDCH data BSR ADDCS DECB BNE WRLOP LDA CSUM BSR SNDCH csum*wait receive ACKorNAK*  if NAK then re-send data(256bytes),csum*  if ACK then nextWR4 BSR RCVCH CMPA #NAK BEQ WR3 CMPA #ACK BNE WR4*no error(B=0,Z=1) CLRB RTS**======================================* receive from Extend serial port* (use ACIA 6850)*    A <- port*RCVCH EQU * PSHS B LDB #CLRTSA ;RTS=H LDA #SERTSA ;RTS=L STA SCMD NOPRCV01 LDA SSTS ASRA BCC RCV01 LDA SDATA ;get data STB SCMD PULS B,PC**--------------------------------------* send to Extend serial port* (use ACIA 6850)*    port <- A*SNDCH EQU * PSHS B LDB #CLRTSA ;RTS=H PSHS A LDA #SERTSA ;RTS=L STA SCMD NOPSND01 LDA SSTS ASRA ASRA BCC SND01 PULS A STA SDATA ;send data STB SCMD PULS B,PC* END